# -*- coding: utf-8 -*-
# vim: set et sw=4 sts=4 fileencoding=utf-8:
#
# PyPRTG - A Python helper library for PRTG
#
# Copyright (c) 2019 Paessler AG
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

"""
Units for use with PRTG Advanced Script, HTTP Data and REST Custom sensors.
"""

from enum import Enum

__all__ = ["ValueMode", "ValueUnit", "ValueSize", "ValueTime", "DecimalMode"]


# DEVELOPER'S NOTE
#
# We are using str mixins here (class MyEnum(str, Enum) instead of just writing
# class MyEnum(Enum)) to assign a type hint to Enum values.
#
# This implementation allows for 'natural' use of the Enums in application code
# while at the same time ensuring stable serialization e.g. with json.dumps().
#
# If you need to implement an Enum using numerical values, use an int mixin:
#
#   class MyEnum(int, Enum)
#
# (which is, on a side note, precisely enum.IntEnum's class definition).


class ValueMode(str, Enum):
    """
    Determines whether a channel value is an absolute value or a counter.
    """

    ABSOLUTE: str = "Absolute"
    DIFFERENCE: str = "Difference"


class ValueUnit(str, Enum):
    """
    Volume / time unit of a channel value.

    PRTG uses this unit for volume and time conversion.

    Note that 'CPU' is a percentage unit that is accounted to the CPU load in
    index graphs.
    """

    BYTESBANDWIDTH: str = "BytesBandwidth"
    BYTESDISK: str = "BytesDisk"
    TEMPERATURE: str = "Temperature"
    PERCENT: str = "Percent"
    TIMERESPONSE: str = "TimeResponse"
    TIMESECONDS: str = "TimeSeconds"
    CUSTOM: str = "Custom"
    COUNT: str = "Count"
    CPU: str = "CPU"
    BYTESFILE: str = "BytesFile"
    SPEEDDISK: str = "SpeedDisk"
    SPEEDNET: str = "SpeedNet"
    TIMEHOURS: str = "TimeHours"


class ValueSize(str, Enum):
    """
    Size unit used for a channel value.
    """

    ONE: str = "One"
    KILO: str = "Kilo"
    MEGA: str = "Mega"
    GIGA: str = "Giga"
    TERA: str = "Tera"
    BYTE: str = "Byte"
    KILOBYTE: str = "KiloByte"
    MEGABYTE: str = "MegaByte"
    GIGABYTE: str = "GigaByte"
    TERABYTE: str = "TeraByte"
    BIT: str = "Bit"
    KILOBIT: str = "KiloBit"
    MEGABIT: str = "MegaBit"
    GIGABIT: str = "GigaBit"
    TERABIT: str = "TeraBit"


class ValueTime(str, Enum):
    """
    Interval time unit used for a channel value.
    """

    SECOND: str = "Second"
    MINUTE: str = "Minute"
    HOUR: str = "Hour"
    DAY: str = "Day"


class DecimalMode(str, Enum):
    """
    Initial value for the Decimal Places option for a channel value.

    Use AUTO for integer values, and "ALL" for float values.
    """

    AUTO: str = "Auto"
    ALL: str = "All"
